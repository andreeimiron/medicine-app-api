const { User } = require('../models');
const { nbOfUsers } = require('./constants');
const { randomDate, randomNumber } = require('./utils');

const populateUserTable = async () => {
  await User.create({
    // id: 1,
    firstName: 'Tavi',
    lastName: 'Udrea',
    email: 'tavi@test.com',
    password: 'asdf1234',
    role: 'medic',
    cnp: '1820808123456',
    serialNumber: 'KX123456',
    nationality: 'romana',
    birthDate: new Date('1982-08-08'),
    birthPlace: 'Romania',
    address: 'str. Lunii nr.3',
    gender: 'masculin',
    motherName: 'Maria',
    fatherName: 'Vasile',
    jobTitle: 'Medic primar, medicina de familie',
    companyName: 'Cabinetul medical YourLife',
    phoneNumber: '+40740123978',
    emergencyContactName: 'Alexia, sora',
    emergencyContactPhoneNumber: '+40743556677',
    medicalCode: 'MPMF-3345677',
    insuredCode: '6145317513982637238',
    currentMedication: [],
    bloodType: 'B+',
    allergies: ['acarieni', 'mucegai'],
    insuredType: 'salariat',
    birthType: 'naturala',
    weight: 92,
    height: 178,
    lastPeriod: null,
    doctorId: 1
  });

  await User.create({
    // id: 2,
    firstName: 'Adnana',
    lastName: 'Cordos',
    email: 'adnana@test.com',
    password: 'asdf1234',
    role: 'medic',
    cnp: '2860808123456',
    serialNumber: 'KX123456',
    nationality: 'romana',
    birthDate: new Date('1986-08-08'),
    birthPlace: 'Romania',
    address: 'str. Lunii nr.3',
    gender: 'feminin',
    motherName: 'Maria',
    fatherName: 'Vasile',
    jobTitle: 'Medic primar, medicina de familie',
    companyName: 'Cabinetul medical YourLife',
    phoneNumber: '+40740123978',
    emergencyContactName: 'Alexia, sora',
    emergencyContactPhoneNumber: '+40743556677',
    medicalCode: 'MPMF-6684798',
    insuredCode: '13451395691361365913',
    currentMedication: [],
    bloodType: 'A+',
    allergies: ['acarieni'],
    insuredType: 'salariat',
    birthType: 'naturala',
    weight: 70,
    height: 170,
    lastPeriod: new Date('2020-09-09'),
    doctorId: 1
  });

  await User.create({
    // id: 3,
    firstName: 'Andrei',
    lastName: 'Miron',
    email: 'andrei@test.com',
    password: 'asdf1234',
    role: 'pacient',
    cnp: '1991016123456',
    serialNumber: 'CJ123456',
    nationality: 'romana',
    birthDate: new Date('1999-10-16'),
    birthPlace: 'Romania',
    address: 'str. Fericirii nr.1',
    gender: 'masculin',
    motherName: 'Simona',
    fatherName: 'Ioan',
    jobTitle: '',
    companyName: '',
    phoneNumber: '+40757078576',
    emergencyContactName: 'Ioan, tata',
    emergencyContactPhoneNumber: '+40745617480',
    medicalCode: '',
    insuredCode: '87236578325687236578',
    currentMedication: [],
    bloodType: 'A-',
    allergies: ['praf de casa', 'veninul insectelor'],
    insuredType: 'elev/student (18-26 ani)',
    birthType: 'naturala',
    weight: 72,
    height: 185,
    lastPeriod: null,
    doctorId: 1
  });

  await User.create({
    // id: 4,
    firstName: 'Simona',
    lastName: 'Miron',
    email: 'simona@test.com',
    password: 'asdf1234',
    role: 'pacient',
    cnp: '2760713123456',
    serialNumber: 'MS123456',
    nationality: 'romana',
    birthDate: new Date('1976-07-13'),
    birthPlace: 'Romania',
    address: 'str. Dacia nr.1',
    gender: 'feminin',
    motherName: 'Ana',
    fatherName: 'Vlad',
    jobTitle: 'gestionar',
    companyName: 'Panemar',
    phoneNumber: '+40752237746',
    emergencyContactName: 'Ioan, sot',
    emergencyContactPhoneNumber: '+40745617480',
    medicalCode: '',
    insuredCode: '9823645378568736725',
    currentMedication: [],
    bloodType: 'A-',
    allergies: [],
    insuredType: 'salariat',
    birthType: 'cezariana',
    weight: 70,
    height: 168,
    lastPeriod: new Date('2021-03-13'),
    doctorId: 1
  });

  const indexes = [...Array(nbOfUsers - 3).keys()];
  const lastNames = ['Rusu', 'Stanciu', 'Udrea', 'Talpos', 'Iancu', 'Sarosi'];
  const firstNames = ['Alexandru', 'Octavian', 'Nicoleta', 'Laurentiu', 'Andrei', 'Andreea', 'Adnana', 'Patricia', 'Vlad', 'Ovidiu', 'Alex', 'Ionut']

  await Promise.all(indexes.map(async (index) => {
    await User.create({
      firstName: firstNames[randomNumber(0, 11)],
      lastName: lastNames[randomNumber(0, 5)],
      email: `pacient${index + 1}@test.com`,
      password: 'asdf1234',
      role: 'pacient',
      cnp: '2760713123456',
      serialNumber: 'MS123456',
      nationality: 'romana',
      birthDate: randomDate(new Date('1960-01-01'), new Date()),
      birthPlace: 'Romania',
      address: `str. Testarii nr.${index + 1}`,
      gender: index % 2 ? 'feminin' : 'masculin',
      motherName: 'Mama ',
      fatherName: 'Tata',
      jobTitle: 'pacient',
      companyName: 'Test',
      phoneNumber: '+40752234456',
      emergencyContactName: 'Persoana contact',
      emergencyContactPhoneNumber: '+0742123465',
      medicalCode: null,
      insuredCode: '9826532081563156134',
      currentMedication: [],
      bloodType: 'A-',
      allergies: ['venin de sarpe', 'pene de gaina'],
      insuredType: 'salariat',
      birthType: 'naturala',
      weight: 70,
      height: 168,
      lastPeriod: index % 2 ? randomDate(new Date('2010-01-01'), new Date()) : null,
      doctorId: randomNumber(1, 2)
    });
  }));
};

module.exports = populateUserTable;
